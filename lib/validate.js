// Generated by CoffeeScript 1.6.3
var errors, isValid, isValidatable, proxy, validatable, validate;

errors = require('./errors');

validatable = function(object) {
  return object.validatableObject && object.validatableObject();
};

proxy = function(validatableObject, method, cb) {
  var error, result;
  if (!validatable(validatableObject)) {
    return cb(new errors.NotValidatableError("Object is not validatable: " + validatableObject));
  }
  try {
    result = validatableObject[method]();
  } catch (_error) {
    error = _error;
    return cb(error, null);
  }
  return cb(null, result);
};

validate = function(validatableObject, cb) {
  return proxy(validatableObject, 'validate', cb);
};

isValid = function(validatableObject, cb) {
  return proxy(validatableObject, 'isValid', cb);
};

isValidatable = function(validatableObject, cb) {
  return proxy(validatableObject, 'isValidatable', cb);
};

module.exports = {
  validate: validate,
  isValid: isValid,
  isValidatable: isValidatable
};
