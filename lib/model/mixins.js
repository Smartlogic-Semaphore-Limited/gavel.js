// Generated by CoffeeScript 1.6.3
var BodyValidator, HeadersValidator, async, errors, extendable, validatable, validatableMessage;

async = require('async');

extendable = require('../utils/extendable').extendable;

errors = require('../errors');

BodyValidator = require('../validators/body-validator').BodyValidator;

HeadersValidator = require('../validators/headers-validator').HeadersValidator;

validatable = {
  validate: function(cb) {
    var result;
    result = {
      headers: this.validateHeaders(),
      body: this.validateBody(),
      statusCode: this.validateStatus()
    };
    return result;
  },
  isValidatable: function() {
    return true;
  },
  isValid: function() {
    return this.validateBody().length === 0 && this.validateHeaders().length === 0 && this.validateStatus();
  },
  getValidator: function(type) {
    switch (type) {
      case 'body':
        return new BodyValidator({
          real: this.body,
          expected: this.expected.body,
          schema: this.expected.bodySchema
        });
      case 'headers':
        return new HeadersValidator({
          real: this.headers,
          expected: this.expected.headers,
          schema: this.expected.headersSchema
        });
      default:
        throw new errors.UnknownValidatorError("no validator found for type: " + type);
    }
  },
  validateBody: function() {
    return this.getValidator('body').validate();
  },
  validateHeaders: function() {
    return this.getValidator('headers').validate();
  },
  validateStatus: function() {
    var _ref;
    if (!this.statusCode) {
      return true;
    }
    return this.statusCode === ((_ref = this.expected) != null ? _ref.statusCode : void 0);
  },
  validatableObject: function() {
    return true;
  }
};

validatableMessage = {
  validate: function() {
    return {
      httpRequest: this.httpRequest.validate(),
      httpResponse: this.httpResponse.validate()
    };
  },
  isValidatable: function() {
    return this.httpRequest.isValidatable() && this.httpResponse.isValidatable();
  },
  isValid: function() {
    return this.httpRequest.isValid() && this.httpResponse.isValid();
  },
  validatableObject: function() {
    return this.httpRequest.validatableObject && this.httpResponse.validatableObject && this.httpRequest.validatableObject() && this.httpResponse.validatableObject();
  }
};

Function.prototype.actAsValidatable = function() {
  return extendable.include(validatable, this);
};

Function.prototype.actAsValidatableMessage = function() {
  return extendable.include(validatableMessage, this);
};
