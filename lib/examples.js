// Generated by CoffeeScript 1.6.3
var ExpectedHttpRequest, ExpectedHttpResponse, HttpMessage, HttpRequest, HttpResponse, async, expectedHttpRequest, expectedHttpRequestProps, expectedHttpResponse, expectedHttpResponseProps, httpMessage, httpMessageProps, httpRequest, httpRequestProps, httpResponse, httpResponseProps, isValid, isValidatable, validate, _ref, _ref1, _ref2;

async = require('async');

_ref = require('./model/http-request'), HttpRequest = _ref.HttpRequest, ExpectedHttpRequest = _ref.ExpectedHttpRequest;

_ref1 = require('./model/http-response'), HttpResponse = _ref1.HttpResponse, ExpectedHttpResponse = _ref1.ExpectedHttpResponse;

HttpMessage = require('./model/http-message').HttpMessage;

_ref2 = require('./validate'), validate = _ref2.validate, isValid = _ref2.isValid, isValidatable = _ref2.isValidatable;

expectedHttpRequestProps = {
  method: 'GET',
  url: 'http://www.google.com',
  headers: {
    'h1': 'v1',
    'h2': 'v2'
  },
  body: '{"k2": "v1"}',
  headersSchema: null,
  bodySchema: null
};

expectedHttpRequest = new ExpectedHttpRequest(expectedHttpRequestProps);

httpRequestProps = {
  method: 'GET',
  url: 'http://www.google.com',
  headers: {
    'h1': 'v1',
    'h2': 'v2'
  },
  body: '{"k2": "v1"}',
  expected: expectedHttpRequest
};

httpRequest = new HttpRequest(httpRequestProps);

expectedHttpResponseProps = {
  statusCode: 200,
  statusMessage: 'statusMessage',
  headers: {
    'h1': 'v1',
    'h2': 'v2'
  },
  body: '{"k2": "v1"}',
  headersSchema: null,
  bodySchema: null
};

expectedHttpResponse = new ExpectedHttpResponse(expectedHttpResponseProps);

httpResponseProps = {
  statusCode: 200,
  statusMessage: 'statusMessage',
  headers: {
    'h1': 'v1',
    'h2': 'v2'
  },
  body: '{"k2": "v1"}',
  expected: expectedHttpResponse
};

httpResponse = new HttpResponse(httpResponseProps);

httpMessageProps = {
  httpRequest: httpRequest,
  httpResponse: httpResponse
};

httpMessage = new HttpMessage(httpMessageProps);

console.error('----------------------------------');

console.error('HttpRequest called on object');

console.error(httpRequest.validate());

console.error(httpRequest.isValidatable());

console.error(httpRequest.isValid());

console.error('----------------------------------');

console.error('httpResponse called on object');

console.error(httpResponse.validate());

console.error(httpResponse.isValidatable());

console.error(httpResponse.isValid());

console.error('----------------------------------');

console.error('httpMessage called on object');

console.error(httpMessage.validate());

console.error(httpMessage.isValidatable());

console.error(httpMessage.isValid());

async.series([
  function(cb) {
    console.error('----------------------------------');
    console.error('HttpRequest called by wrapper');
    return validate(httpRequest, function(err, result) {
      console.error(result);
      return cb(err, result);
    });
  }, function(cb) {
    return isValidatable(httpRequest, function(err, result) {
      console.error(result);
      return cb(err, result);
    });
  }, function(cb) {
    return isValid(httpRequest, function(err, result) {
      console.error(result);
      return cb(err, result);
    });
  }, function(cb) {
    console.error('----------------------------------');
    console.error('httpResponse called by wrapper');
    return validate(httpResponse, function(err, result) {
      console.error(result);
      return cb(err, result);
    });
  }, function(cb) {
    return isValidatable(httpResponse, function(err, result) {
      console.error(result);
      return cb(err, result);
    });
  }, function(cb) {
    return isValid(httpResponse, function(err, result) {
      console.error(result);
      return cb(err, result);
    });
  }, function(cb) {
    console.error('----------------------------------');
    console.error('httpMessage called by wrapper');
    return validate(httpMessage, function(err, result) {
      console.error(result);
      return cb(err, result);
    });
  }, function(cb) {
    return isValidatable(httpMessage, function(err, result) {
      console.error(result);
      return cb(err, result);
    });
  }, function(cb) {
    return isValid(httpMessage, function(err, result) {
      console.error(result);
      return cb(err, result);
    });
  }
]);
