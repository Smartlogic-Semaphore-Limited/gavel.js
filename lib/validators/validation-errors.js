// Generated by CoffeeScript 1.6.3
var ValidationErrors, crypto;

crypto = require('crypto');

ValidationErrors = ValidationErrors = (function() {
  function ValidationErrors(amandaErrors) {
    var i, _i, _ref;
    this.length = (amandaErrors != null ? amandaErrors.length : void 0) || 0;
    this.amandaErrors = amandaErrors || {};
    this.now = Date.now().toString();
    this.dataError = null;
    if (this.length > 0) {
      for (i = _i = 0, _ref = this.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this[i] = this.amandaErrors[i];
      }
    }
  }

  ValidationErrors.prototype.getByPath = function(pathArray) {
    if (!this.hashTable) {
      this.buildHashtable();
    }
    return this.hashTable[this.getKeyFromPath(pathArray)] || [];
  };

  ValidationErrors.prototype.buildHashtable = function() {
    var i, key, _i, _ref, _results;
    this.hashTable = {};
    if (this.length < 1) {
      return;
    }
    _results = [];
    for (i = _i = 0, _ref = this.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      key = this.getKeyFromPath(this.amandaErrors[i]['property']);
      if (!this.hashTable[key]) {
        this.hashTable[key] = [];
      }
      _results.push(this.hashTable[key].push(this.amandaErrors[i]));
    }
    return _results;
  };

  ValidationErrors.prototype.getKeyFromPath = function(path) {
    return crypto.createHash('md5').update(path.join(this.now)).digest('hex');
  };

  return ValidationErrors;

})();

module.exports = {
  ValidationErrors: ValidationErrors
};
