// Generated by CoffeeScript 1.6.3
var HeadersValidator, JsonValidator, SchemaGenerator, SchemaProperties, errors, _ref;

errors = require('../errors');

JsonValidator = require('./json-validator').JsonValidator;

_ref = require('../utils/schema-generator'), SchemaGenerator = _ref.SchemaGenerator, SchemaProperties = _ref.SchemaProperties;

HeadersValidator = HeadersValidator = (function() {
  function HeadersValidator(_arg) {
    var error, expected, outError, real, schema;
    real = _arg.real, expected = _arg.expected, schema = _arg.schema;
    if (schema) {
      try {
        if (typeof schema !== 'object') {
          throw new Error('schema is not object');
        }
        if (Object.keys(schema).length === 0) {
          this.schema = null;
        } else {
          this.schema = JSON.parse(JSON.stringify(schema));
        }
      } catch (_error) {
        error = _error;
        outError = new errors.SchemaNotJsonParsableError(error.message);
        outError['schema'] = schema;
        throw outError;
      }
    } else if (expected) {
      try {
        this.expected = JSON.parse(JSON.stringify(expected));
        this.schema = this.getSchema(this.prepareHeaders(this.expected));
      } catch (_error) {
        error = _error;
        outError = new errors.MalformedDataError(error.message);
        outError['data'] = expected;
        throw outError;
      }
    } else {
      throw new errors.NotEnoughDataError("expected data or json schema must be defined");
    }
    try {
      this.real = this.prepareHeaders(JSON.parse(JSON.stringify(real)));
    } catch (_error) {
      error = _error;
      outError = new errors.MalformedDataError(error.message);
      outError['data'] = real;
      throw outError;
    }
    this.validator = new JsonValidator({
      data: this.real,
      schema: this.schema
    });
  }

  HeadersValidator.prototype.validate = function() {
    return this.validator.validate();
  };

  HeadersValidator.prototype.prepareHeaders = function(headers) {
    var key, transformedHeaders, value;
    transformedHeaders = {};
    for (key in headers) {
      value = headers[key];
      transformedHeaders[key.toLowerCase()] = value;
    }
    return transformedHeaders;
  };

  HeadersValidator.prototype.getSchema = function(data) {
    var properties, schemaGenerator;
    properties = new SchemaProperties({});
    properties.set({
      keysStrict: false,
      valuesStrict: true,
      typesStrict: false
    });
    schemaGenerator = new SchemaGenerator({
      json: data,
      properties: properties
    });
    return schemaGenerator.generate();
  };

  return HeadersValidator;

})();

module.exports = {
  HeadersValidator: HeadersValidator
};
