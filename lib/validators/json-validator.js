// Generated by CoffeeScript 1.6.3
var JsonValidator, ValidationErrors, amanda, crypto, errors;

amanda = require('amanda');

crypto = require('crypto');

ValidationErrors = require('./validation-errors').ValidationErrors;

errors = require('../errors');

JsonValidator = JsonValidator = (function() {
  function JsonValidator(_arg) {
    var data, error, outError, schema;
    data = _arg.data, schema = _arg.schema;
    try {
      if (typeof data !== 'object') {
        throw new Error('input data is not object');
      }
      this.data = JSON.parse(JSON.stringify(data));
    } catch (_error) {
      error = _error;
      outError = new errors.DataNotJsonParsableError('JSON validator: ' + error.message);
      outError['data'] = data;
      throw outError;
    }
    try {
      if (typeof schema !== 'object') {
        throw new Error('input schema is not object');
      }
      this.schema = JSON.parse(JSON.stringify(schema));
    } catch (_error) {
      error = _error;
      outError = new errors.SchemaNotJsonParsableError('JSON validator: ' + error.message);
      outError['schema'] = schema;
      throw outError;
    }
  }

  JsonValidator.prototype.validate = function() {
    var dataHash, error, schemaHash;
    if ((typeof this.data === 'object' && Object.keys(this.data).length === 0) || (typeof this.data === 'object' && this.schema['empty'])) {
      error = {
        "length": 0,
        "errorMessages": {}
      };
      return new ValidationErrors(error);
    }
    dataHash = this.getHash(this.data);
    schemaHash = this.getHash(this.schema);
    if (this.dataHash === dataHash && this.schemaHash === schemaHash) {
      return this.errors;
    } else {
      this.dataHash = dataHash;
      this.schemaHash = schemaHash;
    }
    return this.validatePrivate();
  };

  JsonValidator.prototype.validatePrivate = function() {
    var error,
      _this = this;
    try {
      return amanda.validate(this.data, this.schema, {
        singleError: false
      }, function(error) {
        return _this.errors = new ValidationErrors(error);
      });
    } catch (_error) {
      error = _error;
      error = {
        "0": {
          "property": [],
          "attributeValue": true,
          "message": "Validator internal error: " + error.message,
          "validatorName": "error"
        },
        "length": 1,
        "errorMessages": {}
      };
      return this.errors = new ValidationErrors(error);
    }
  };

  JsonValidator.prototype.getHash = function(data) {
    return crypto.createHash('md5').update(JSON.stringify(data)).digest('hex');
  };

  return JsonValidator;

})();

module.exports = {
  JsonValidator: JsonValidator
};
